// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  businessName   String?
  phone          String?
  address        String?
  avatar         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  vehicles       Vehicle[]
  expenses       Expense[]
  documents      Document[]
  customers      Customer[]
  notes          Note[]
}

model Vehicle {
  id             String    @id @default(cuid())
  vin            String    @unique
  year           Int
  make           String
  model          String
  trim           String?
  mileage        Int
  color          String?
  engineType     String?
  transmission   String?
  drivetrain     String?
  fuelType       String?
  bodyStyle      String?
  purchasePrice  Float
  purchaseDate   DateTime
  salePrice      Float?
  saleDate       DateTime?
  status         String    @default("available")
  condition      String?
  location       String?
  notes          String?
  imageUrl       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  
  expenses       Expense[]
  documents      Document[]
  sales          Sale[]
}

model Expense {
  id          String   @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  category    String   // REPAIR, DETAILING, TRANSPORTATION, INSPECTION, PARTS, FEES, MAINTENANCE, OTHER
  amount      Float
  description String
  date        DateTime
  status      String   @default("pending") // pending, paid
  vendor      String?
  invoiceNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Document {
  id          String    @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  name        String
  type        String    // TITLE, REGISTRATION, INSURANCE, PURCHASE_AGREEMENT, INSPECTION_REPORT, SERVICE, OTHER
  url         String    // URL to the file in cloud storage
  size        String
  mimeType    String?
  expiryDate  DateTime?
  status      String    @default("active") // active, expiring, expired
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Customer {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  email        String    
  phone        String
  address      String?
  type         String    // buyer, seller, both
  businessName String?
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  
  notes        Note[]
  sales        Sale[]
  
  @@unique([email, userId])
}

model Note {
  id         String   @id @default(cuid())
  content    String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Sale {
  id         String   @id @default(cuid())
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  salePrice  Float
  saleDate   DateTime
  profit     Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
} 